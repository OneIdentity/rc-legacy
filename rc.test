#!/bin/sh
#
# usage:
#   rc.test [-installed] [/build/path]
# If build path is not provided, assumes "."
#
# If -installed is given, then assumes package is installed under /opt/quest
# AND that the vasidmapd service is running
#

: ${host:=127.0.0.1}
: ${port:=389}          # vastool -p option not working
: ${vastool:=/opt/quest/bin/vastool}
: ${debug:=}        # eg -d2
: ${prefix:=/opt/quest}
: ${SUDO:=sudo}

if [ x"$1" = x"-installed" ]; then
    installed=true
    echo "Note: Testing installed package"
    shift
else
    installed=false
fi

if [ $# -gt 0 ]; then
    builddir="$1"
    shift
else
    : ${builddir:=.}
fi

EXIT=0
desc () { DESC="$*"; }
fail () { echo "[37;41mFAILED[m [4m$DESC${*:+ ($*)}[m" >&2; EXIT=1; }
pass () { echo "[37;42mPASSED[m [4m$DESC${*:+ ($*)}[m" >&2; }
result () { test $? -eq 0 && pass || fail; }
negresult () { test $? -eq 1 && pass || fail; }
fatal () { fail; exit 1; }
required () { test $? -eq 0 && pass || fatal; }
verbose () { test -n "$debug" && echo "[4m+ $*[m" >&2; "$@"; }

#-- a place for our temporary files
tmpdir=${TMPDIR:-/tmp}/vasidmap.test.$$
mkdir -p ${tmpdir}
chmod 777 ${tmpdir}
trap "rm -rf ${tmpdir}" 0

expfile=${tmpdir}/expfile
outfile=${tmpdir}/outfile

#-- obtain host/ TGT so these tests can run automated
krb5ccfile=${tmpdir}/krb5cc_host_vasidmap
KRB5CCNAME=FILE:${krb5ccfile}; export KRB5CCNAME
${SUDO} rm -f ${krb5ccfile}
${SUDO} $vastool kinit host/ || fail "Can't obtain host keytab"
${SUDO} chmod 666 ${krb5ccfile}
#$vastool klist

#-- used SID/GID/UIDs for testing
uid=`$vastool list users | awk -F: '{print $3; exit;}'`
uname=`$vastool nss getpwuid $uid | awk -F: '{print $1}'` 
usid=`$vastool attrs -b -u $uname objectSid | awk '{print $2}'`
gid=`$vastool list groups | awk -F: '{print $3; exit;}'`
gsid=`$vastool list -s groups | awk -F: '$3 == gid {print $5; exit;}' gid=$gid`
gname=`$vastool list -s groups | awk -F: '$3 == gid {print $1; exit;}' gid=$gid`

uid2=`$vastool list users | awk -F: '$3 != uid {print $3; exit;}' uid=$uid`
uname2=`$vastool nss getpwuid $uid2 | awk -F: '{print $1}'` 
usid2=`$vastool attrs -b -u $uname2 objectSid | awk '{print $2}'`
gid2=`$vastool list groups | awk -F: '$3 != gid {print $3; exit;}' gid=$gid`
gsid2=`$vastool list -s groups | awk -F: '$3 == gid2 {print $5; exit;}' gid2=$gid2`
gname2=`$vastool list -s groups | awk -F: '$3 == gid2 {print $1; exit;}' gid2=$gid2`

#-- unused SID/UID/GIDs for testing
findid () {
    #-- returns an ID that doesn't appear to be used
    id=0
    while $vastool nss $1 $id 2>/dev/null >/dev/null; do
        id=`expr $id '*' 3`
        id=`expr $id '+' 7`
    done
    echo $id
}
badsid=S-1-2-3-4-5-6-7
baduname=_baduname
baduid=`findid getpwuid`
badgname=_badgname
badgid=`findid getgrgid`

#test -z "$debug" ||
    cat <<. >&2
    Test parameters:

        uname=    $uname
        uid=      $uid
        usid=     $usid
        gname=    $gname
        gid=      $gid
        gsid=     $gsid

        uname2=   $uname2
        uid2=     $uid2
        usid2=    $usid2
        gname2=   $gname2
        gid2=     $gid2
        gsid2=    $gsid2

        badsid=   $badsid
        baduname= $baduname
        baduid=   $baduid
        badgname= $badgname
        badgid=   $badgid
.

#-- usage: trycommand "desc" command... <expected-output
trycommand () {
    desc "$1"
    shift
    cat > $expfile
    verbose "$@" > $outfile &&
    cmp $outfile $expfile
    result
    if cmp $outfile $expfile >/dev/null; then
        : ok
    else
        echo "expected:"
        sed -ne l $expfile | sed -e 's/^/	|/'  -e 's/$/|/'
        test -s $expfile || echo '	(empty)'
        echo "but got:"
        sed -ne l $outfile | sed -e 's/^/	|/'  -e 's/$/|/'
        test -s $outfile || echo '	(empty)'
    fi >&2
}

#------------------------------------------------------------
# vasidmap tests

if $installed; then
    vasidmap=$prefix/bin/vasidmap
else
    vasidmap=$builddir/vasidmap
fi

#-- usage: trymap args <expected-output
trymap () {
    trycommand "vasidmap $*" ${vasidmap} "$@"
}
trymapfail () {
    desc "vasidmap $*, negative"
    if verbose ${vasidmap} "$@" >$outfile 2>/dev/null; then
        fail
    elif test -s $outfile; then
        echo "expected empty stdout, but got:"
        cat $outfile
        fail
    else
        pass
    fi
}

trymap $uname <<.
$uname
.

trymap -u $uid <<.
$usid
.

trymap -g $gid <<.
$gsid
.

trymap -un $uname <<.
$usid
.

trymap -gn "$gname" <<.
$gsid
.

trymap -sU $usid <<.
$uid
.

trymap -sG $gsid <<.
$gid
.

#trymapfail -sU $gsid
#trymapfail -sG $usid

trymapfail -u $baduid
trymapfail -g $badgid
trymapfail -un $baduname
trymapfail -gn $badgname
trymapfail -sU $badsid
trymapfail -sG $badsid

#------------------------------------------------------------
# vasidmapd tests

if $installed; then
    echo "(using running vasidmapd service)"
else
    desc "start vasidmapd"
        ${SUDO} ${builddir}/vasidmapd -F -A $host -p $port $debug &
        pid=$!
        trap "rm -rf ${tmpdir}; ${SUDO} kill $pid && wait 2>/dev/null" 0 
        sleep 1
        ${SUDO} kill -0 $pid 2>/dev/null
    required
fi

#-- usage: tryfilter "filter" ["description"] <expected-output
tryfilter () {
    trycommand "${2:-$1}" $vastool search -a -h $host -p $port "$1" 
}

#-- usage: tryfilterfail "filter" ["description"]
tryfilterfail () {
    desc "${2:-$1, negative}"
    verbose $vastool search -a -h $host -p $port "$1" >/dev/null 2>/dev/null
    negresult
}

tryfilterfail '(arbitrary=equality)'

tryfilter '(objectClass=sambaUnixIdPool)' <<.
dn: CN=VAS-Idmapper
objectClass: sambaUnixIdPool
uidNumber: 1000
gidNumber: 1000
.


tryfilter '(OBjeCTcLASS=SAmBAuNIXiDpoOl)' <<.
dn: CN=VAS-Idmapper
objectClass: sambaUnixIdPool
uidNumber: 1000
gidNumber: 1000
.

tryfilterfail '(&(a=b)(c=d)(e=f))'

tryfilter "(&(objectClass=sambaIdmapEntry)(sambaSID=$usid))" <<.
dn: CN=VAS-Idmapper
sambaSID: $usid
objectClass: sambaIdmapEntry
uidNumber: $uid
.

tryfilter "(&(objectClass=sambaIdmapEntry)(sambaSID=$gsid))" <<.
dn: CN=VAS-Idmapper
sambaSID: $gsid
objectClass: sambaIdmapEntry
gidNumber: $gid
.

tryfilter "(&(objectClass=sambaIdmapEntry)(uidNumber=$uid))" <<.
dn: CN=VAS-Idmapper
sambaSID: $usid
objectClass: sambaIdmapEntry
uidNumber: $uid
.

tryfilter "(&(objectClass=sambaIdmapEntry)(gidNumber=$gid))" <<.
dn: CN=VAS-Idmapper
sambaSID: $gsid
objectClass: sambaIdmapEntry
gidNumber: $gid
.

tryfilterfail "(&(objectClass=sambaIdmapEntry)(sambaSID=$badsid))"
tryfilterfail "(&(objectClass=sambaIdmapEntry)(uidNumber=$baduid))"
tryfilterfail "(&(objectClass=sambaIdmapEntry)(gidNumber=$badgid))"

#-- disjunction tests
tryfilter "(&(objectClass=sambaIdmapEntry)(|(gidNumber=$gid)(gidNumber=$gid2)))" <<.
dn: CN=VAS-Idmapper
sambaSID: $gsid
objectClass: sambaIdmapEntry
gidNumber: $gid

dn: CN=VAS-Idmapper
sambaSID: $gsid2
objectClass: sambaIdmapEntry
gidNumber: $gid2
.

tryfilter "(&(objectClass=sambaIdmapEntry)(|(uidNumber=$uid)(uidNumber=$uid2)))" <<.
dn: CN=VAS-Idmapper
sambaSID: $usid
objectClass: sambaIdmapEntry
uidNumber: $uid

dn: CN=VAS-Idmapper
sambaSID: $usid2
objectClass: sambaIdmapEntry
uidNumber: $uid2
.

tryfilter "(&(objectClass=sambaIdmapEntry)(|(uidNumber=$uid)(gidNumber=$gid)))" <<.
dn: CN=VAS-Idmapper
sambaSID: $usid
objectClass: sambaIdmapEntry
uidNumber: $uid

dn: CN=VAS-Idmapper
sambaSID: $gsid
objectClass: sambaIdmapEntry
gidNumber: $gid
.

tryfilter "(&(objectClass=sambaIdmapEntry)(|(sambaSID=$gsid)(sambaSID=$usid)))" <<.
dn: CN=VAS-Idmapper
sambaSID: $gsid
objectClass: sambaIdmapEntry
gidNumber: $gid

dn: CN=VAS-Idmapper
sambaSID: $usid
objectClass: sambaIdmapEntry
uidNumber: $uid
.

tryfilter "(&(objectClass=sambaIdmapEntry)(|(uidNumber=$uid)(uidNumber=$baduid)))" <<.
dn: CN=VAS-Idmapper
sambaSID: $usid
objectClass: sambaIdmapEntry
uidNumber: $uid
.

tryfilter "(&(objectClass=sambaIdmapEntry)(|(uidNumber=$baduid)(uidNumber=$uid)))" <<.
dn: CN=VAS-Idmapper
sambaSID: $usid
objectClass: sambaIdmapEntry
uidNumber: $uid
.

tryfilter "(&(objectClass=sambaIdmapEntry)(|(uidNumber=$uid)(uidNumber=$uid2)(gidNumber=$gid)(gidNumber=$gid2)(sambaSID=$usid)(sambaSID=$usid2)(sambaSID=$gsid)(sambaSID=$gsid2)))" <<.
dn: CN=VAS-Idmapper
sambaSID: $usid
objectClass: sambaIdmapEntry
uidNumber: $uid

dn: CN=VAS-Idmapper
sambaSID: $usid2
objectClass: sambaIdmapEntry
uidNumber: $uid2

dn: CN=VAS-Idmapper
sambaSID: $gsid
objectClass: sambaIdmapEntry
gidNumber: $gid

dn: CN=VAS-Idmapper
sambaSID: $gsid2
objectClass: sambaIdmapEntry
gidNumber: $gid2

dn: CN=VAS-Idmapper
sambaSID: $usid
objectClass: sambaIdmapEntry
uidNumber: $uid

dn: CN=VAS-Idmapper
sambaSID: $usid2
objectClass: sambaIdmapEntry
uidNumber: $uid2

dn: CN=VAS-Idmapper
sambaSID: $gsid
objectClass: sambaIdmapEntry
gidNumber: $gid

dn: CN=VAS-Idmapper
sambaSID: $gsid2
objectClass: sambaIdmapEntry
gidNumber: $gid2
.

exit $EXIT
