This work is derived from IBM's combined userid/password authentication and group lookup sample avaliable at:
http://publib.boulder.ibm.com/infocenter/db2help/topic/com.ibm.db2.udb.doc/ad/samples/sec/s-combined-c.htm

The purpose for it's creation was allowing the use of the VAS(Vintela Authentication Service) for user information/authentication, but it should accept anything that can provide LAM or PAM info/auth.

The groups command has been modified to use a getgrent loop, so it can locate any system available group membership.

On the AIX builds it uses getgrset, becasue getgrent doesn't return groups outside of files.

The authentication is provided through the pam_auth_user and lam_auth_user code examples on the rc.vintela.com website, under the labs section. (Ok, not yet, but they will be there eventually.)

This type of authentication is problematic for local users. 
On AIX (and most shadowed systems) only root has the rights to read /etc/system/passwd(/etc/shadow or something else on others), which is where the password hashes are stored.

From:
http://publib.boulder.ibm.com/infocenter/db2help/index.jsp?topic=/com.ibm.db2.udb.doc/ad/r0012026.htm

Note:
The plug-in code will be run with the privileges of the client application. 
The plug-in writer should take this into consideration if authentication 
requires special privileges (such as root). 

The helper program has to be chown'ed to root and setuid'ed, so when it runs it can do the authentication. This is done when root runs the install.sh script. The file should only be accessable to the instance user, and not pose a large security risk. Since it hits the PAM/LAM interfaces, bad attempts and other access control happens.

WARNING: To work properly, the install.sh script does a setuid on the helper program. This is because on AIX, you need root access to do a proper authentication. If this is not done, then the authentication that can work is to VAS through PAM only. And then, no group information can be pulled from the users PAC becasue it can't read /etc/opt/vas/host.keytab to decrypt the service ticket.

If you wish to use PAM on AIX, you will need an /etc/pam.conf. 
A sample one from IBM is provided in sample.pam.conf.

On AIX: To then get VAS working with pam, you would need to run
/opt/vas/bin/vastool configure pam
to have vas add the neccessary entries to /etc/pam.conf

To install the product, please see the INSTALL file.

The debugging is now to syslog at the auth.notice level. 
It is controlled by settings in /etc/sys-auth.conf, or the root of the instance home (i.e. /home/db2inst1/sys-auth.conf).
An entry of debug-level = <1-4> will increase/decrese the debug level. 
1 is the default, it will log authentications. 
2 is extended authentication information, including reason for failures.
3 is debug, shouldn't be needed. 
4 is everything I could think of. 

WARNING: AIX's pam_vas library on 5.2 is 32-bit only. If you have a 64-bit instance, and want to run PAM, you can only do so against VAS/Others of 64-bit, and add similiar to:
sys-auth64 auth sufficient /opt/vas/lib/security/pam_vas64.so get_tgt create_homedir
to /etc/pam.conf.

This will hit VAS's 64-bit PAM library.

The pamAuth.c have been changed to use sys-auth32/64 as the service name.

On Linux, a new /etc/pam.d/sys-auth32 file should be made, otherwise it will use the default other, which on most linux distros is denied by default. 

Solaris 10 issue:
VAS 2.6 and earlier versions of 3 only create the 64-bit directory /opt/quest/lib/security/sparcv9 for pam_vas.so to exist in. 
On Solaris 10, its $ISA macro is 64 instead of sparcv9, so a 64-bit application looks for pam_vas in
/opt/quest/lib/security/64/pam_vas.so. Which doesnt' exist. To fix, run:
ln -s /opt/quest/lib/security/sparcv9 /opt/quest/lib/security/64
