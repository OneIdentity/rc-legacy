#!/bin/bash
# (c) 2006 Quest Software, Inc. All rights reserved.

VASTOOL="/opt/quest/bin/vastool"
SAMBACONF="/etc/opt/quest/samba/smb.conf"
VASCONF="/etc/opt/quest/vas/vas.conf"

DEBUG=0

# parameters:
#  1 parm name
# return:
#  0 all ok
#  1 parm missing 
function check_parm {

	PREG=`echo $1 | sed -e s/\ /[\ ]\*/g`
	CONFFILE=$2

	grep -E "^[ \t]*$PREG[ \t]*=[ \t]*" ${CONFFILE} >/dev/null
	if [ "$?" -ne "0" ]; then

		#param missing
		return 1
	fi

	return 0
}


# parameters:
#  $1 parm name
#  $2 correct value
# return:
#  0 all ok
#  1 parm missing 

function check_and_fix {

	PREG=`echo $1 | sed -e s/\ /[\ ]\*/g`
	VALUE=$2
	CONFFILE=$3

	grep -E "^[ \t]*$PREG[ \t]*=[ \t]*${VALUE}[ \t]*" ${CONFFILE} >/dev/null
	if [ "$?" -ne "0" ]; then

		#param wrong or missing
		grep -E "^[ \t]*$PREG[ \t]*=[ \t]*" ${CONFFILE} > /dev/null
		if [ "$?" -ne "0" ]; then

			#param missing
			return 1

		else

			# param wrong, fix it
			echo "WARNING: Parameter > $1 < not correct. Value changed to: $2"

			sed -e "s;\(^[ \t]*${PREG}[ \t]*=[ \t]*\).*$;\1${VALUE};" ${CONFFILE} > ${CONFFILE}.new
			mv ${CONFFILE}.new ${CONFFILE}
		fi
	fi

	return 0
}

##########################
#          MAIN          #
##########################


# First of all check if we are joined
/opt/quest/bin/vastool -u host/ auth -S host/ > /dev/null 2>&1
if [ "$?" != "0" ]; then
	echo "ERROR: The machine appears to be not joined to any domain"
	echo "Verify the machine is correctly joined and then launch"
	echo "/opt/quest/bin/vasidmap-config to finish up the installation"
	echo "and configuration of both samba and vas"
	exit 1
fi

#Gather configuration data
# Find the REALM
REALM=`${VASTOOL} -u host/ info domain | tr "[:lower:]" "[:upper:]"`
if [ "$REALM" = "" ]; then
	echo "ERROR: unable to determine REALM."
	echo "Is the machine porperly joined to the domain ?"
	exit 1
fi

# Find the pre-Windows 2000 Domain Name (Workgroup)
DOMAINDN=`${VASTOOL} -u host/ info domain-dn`
if [ "$DOMAINDN" = "" ]; then
	echo "ERROR: unable to determine the domain DN."
	echo "Is the machine porperly joined to the domain ?"
	exit 1
fi

WORKGROUP=`${VASTOOL} -u host/ search -b CN=Configuration,${DOMAINDN} -q \(ncName=${DOMAINDN}\) nETBIOSName`
if [ "$WORKGROUP" = "" ]; then
	echo "ERROR: unable to determine the pre-Windows 2000 Domain Name."
	echo "Is the machine porperly joined to the domain ?"
	exit 1
fi

if [ ! -f ${SAMBACONF} ]; then
	echo "ERROR: smb.conf file missing!"
	echo "Please verify that samba is installed properly."
	exit 1
else
	#Backup smb.conf
	TODAY=`date +"%Y%m%d"`
	cp ${SAMBACONF} ${SAMBACONF}.${TODAY}
fi

### Make sure samba services are stopped while checking and updating configuration
if [ -f /etc/init.d/nmb-quest ]; then
	# Suse has this, RedHat don't
	/etc/init.d/nmb-quest stop
fi
/etc/init.d/smb-quest stop
/etc/init.d/winbind-quest stop

##########################
# Verify/Modify smb.conf #
##########################

CONFMOD=${SAMBACONF}.mod

#Must do this before calling any check_* function
cp ${SAMBACONF} ${CONFMOD}

check_and_fix "workgroup" "${WORKGROUP}" "${CONFMOD}"
if [ "$?" -eq "1" ]; then
	MISSING_WORKGROUP=1
	MISSINGS=1
fi

check_and_fix "realm" "${REALM}" "${CONFMOD}"
if [ "$?" -eq "1" ]; then
	MISSING_REALM=1
	MISSINGS=1
fi

check_and_fix "security" "ads" "${CONFMOD}"
if [ "$?" -eq "1" ]; then
	MISSING_SECURITY=1
	MISSINGS=1
fi

check_and_fix "use spnego" "yes" "${CONFMOD}"
#if missing do nothing, by default it is true

check_and_fix "use kerberos keytab" "yes" "${CONFMOD}"
if [ "$?" -eq "1" ]; then
	MISSING_UKK=1
	MISSINGS=1
fi

check_and_fix "machine password timeout" "0" "${CONFMOD}"
if [ "$?" -eq "1" ]; then
	MISSING_MPT=1
	MISSINGS=1
fi

check_and_fix "username map script" "/opt/quest/bin/vasidmap" "${CONFMOD}"
if [ "$?" -eq "1" ]; then
	MISSING_UMS=1
	MISSINGS=1
fi

check_and_fix "ldap admin dn" "CN=VasIdmapAdmin" "${CONFMOD}"
if [ "$?" -eq "1" ]; then
	MISSING_LDAPADM=1
	MISSINGS=1
fi

check_and_fix "idmap backend" "ldap" "${CONFMOD}"
if [ "$?" -eq "1" ]; then
	MISSING_IDMAPBCK=1
	MISSINGS=1
fi

check_parm "idmap uid" "${CONFMOD}"
if [ "$?" -eq "1" ]; then
	MISSING_IDMAPUID=1
	MISSINGS=1
fi

check_parm "idmap gid" "${CONFMOD}"
if [ "$?" -eq "1" ]; then
	MISSING_IDMAPGID=1
	MISSINGS=1
fi

check_parm "idmap expire time" "${CONFMOD}"
if [ "$?" -eq "1" ]; then
	MISSING_IDMAPEXP=1
	MISSINGS=1
fi

SECTIONS=0 # 1 will be [GLOBAL], 2 will be the first share

SAVEIFS=$IFS
IFS=""
while read -s ILINE; do

	echo $ILINE | grep -E "[ \t]*\[.*\][ \t]*.*" > /dev/null
	if [ "$?" -eq "0" ]; then
		let SECTIONS++
	fi

	# Terminate reading [GLOBAL]
	if [ "$SECTIONS" == "2" ]; then
	    if [ "$MISSINGS" == "1" ]; then
		#Add all the missing parameters

		echo ""
		echo "### Addedd by vasidmap-config ###"
		echo "#"

		if [ "${MISSING_WORKGROUP}" == "1" ]; then
			echo "  workgroup = ${WORKGROUP}"
		fi

		if [ "${MISSING_REALM}" == "1" ]; then
			echo "  realm = ${REALM}"
		fi

		if [ "${MISSING_SECURITY}" == "1" ]; then
			echo "  security = ads"
		fi

		if [ "${MISSING_UKK}" == "1" ]; then
			echo "  use kerberos keytab = yes"
		fi

		if [ "${MISSING_MPT}" == "1" ]; then
			echo "  machine password timeout = 0"
		fi

		if [ "${MISSING_UMS}" == "1" ]; then
			echo "  username map script = /opt/quest/bin/vasidmap"
		fi

		if [ "${MISSING_LDAPADM}" == "1" ]; then
			echo "  ldap admins dn = CN=VasIdmapAdmin"
		fi

		if [ "${MISSING_IDMAPBCK}" == "1" ]; then
			echo "  idmap backend = ldap"
		fi

		if [ "${MISSING_IDMAPUID}" == "1" ]; then
			echo "  idmap uid = 1-2147483647"
		fi

		if [ "${MISSING_IDMAPGID}" == "1" ]; then
			echo "  idmap gid = 1-2147483647"
		fi

		if [ "${MISSING_IDMAPEXP}" == "1" ]; then
			echo "  idmap expire time = 300   # Expire the tdb cache every 5 minutes"
		fi

		echo "                                #"
		echo "### Addedd by vasidmap-config ###"
		echo ""
		
		# add back the section name
		echo $ILINE

		# Copy as is the rest of the file and exit
		CONT=1
		while read -s ILINE; do
			echo $ILINE
		done

	    fi #MISSINGS

	else
		# Copy everything else
		echo $ILINE
	fi
	
done > ${CONFMOD}.new < ${CONFMOD}
rm -f ${CONFMOD}
mv ${CONFMOD}.new ${SAMBACONF}

#set a fake ldap password
/opt/quest/bin/smbpasswd -w secret > /dev/null 2>&1

##########################
# Verify/Modify vas.conf #
##########################

CONFMOD=${VASCONF}.mod

#Must do this before calling any check_* function
cp ${VASCONF} ${CONFMOD}

check_and_fix "password-change-interval" "0" "${CONFMOD}"
if [ "$?" -eq "1" ]; then
	echo "" >> ${CONFMOD}
	echo "[vasd]" >> ${CONFMOD}
	echo " password-change-interval = 0" >> ${CONFMOD}
fi

mv ${CONFMOD} ${VASCONF}

IFS=$SAVEIFS

if [ "$DEBUG" -ne "0" ]; then
	echo "Exit before changing the password during debug"
	exit 0
fi

# Initialize Random
RANDOM=`date +%s`

# Initialize source array
CHARS=( abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ 1234567890\@\$\%^\&:\;-+\=_\?\.,~\| )

# Secret is an empty string to start off
SECRET=""

#Generate the random password
COUNT=0
while [ $COUNT -lt 30 ]
do
	RD=$(($RANDOM%3))
	SECRET=$SECRET${CHARS[$RD]:$(($RANDOM%26)):1}
	let COUNT++
done

# Change the machine password using vastool
(echo $SECRET; echo $SECRET) | /opt/quest/bin/vastool -s -q -u host/ passwd

# Set the new machine password into secrets.tdb
echo $SECRET | /opt/quest/bin/net -f -i changesecretpw

#Set domain SID
IFS=$'\n'
DOMUSER=`/opt/quest/bin/vastool list users | head -n 1 |cut -d ':' -f 1`
DOMSID=`/opt/quest/bin/vasidmap -u -n "$DOMUSER" | cut -d '-' -f 1-7`
/opt/quest/bin/net setdomainsid $DOMSID

#Finally run vasmap-preload to prefill the idmap cache
#/opt/quest/bin/vasmap-preload

### Finally restart samba services
if [ -f /etc/init.d/nmb-quest ]; then
	# Suse has this, RedHat don't
	/etc/init.d/nmb-quest start
fi
/etc/init.d/smb-quest start
/etc/init.d/winbind-quest start
