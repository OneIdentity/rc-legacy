#!/bin/sh
# (c) 2006 Quest Software, Inc. All rights reserved.

VASTOOL="/opt/quest/bin/vastool"
SAMBACONF="/etc/opt/quest/samba/smb.conf"
VASCONF="/etc/opt/quest/vas/vas.conf"
PWDCHGSCRIPT="/opt/quest/bin/vas-set-samba-password"

DEBUG=0
SP='[ 	]'
LSP='\[ 	\]'
META='[/*+.()]'
METASUBST='s/'"$META"'/\\&/g'


# parameters:
#  1 parm name
# return:
#  0 all ok
#  1 parm missing 
check_parm () {

	PREG=`echo "$1" | sed -e "s/$SP$SP*/$LSP$LSP*/g"`
	CONFFILE=$2

	grep -i "^$SP*$PREG$SP*=" ${CONFFILE} >/dev/null
	if [ "$?" -ne "0" ]; then

		#param missing
		return 1
	fi

	return 0
}


# parameters:
#  $1 parm name
#  $2 correct value
# return:
#  0 all ok
#  1 parm missing 

check_and_fix () {

	PREG=`echo "$1" | sed -e "s/$SP$SP*/$LSP$LSP*/g"`
	VALUE=`echo "$2" | sed -e "$METASUBST"`
	CONFFILE=$3

	grep -i "^$SP*$PREG$SP*=$SP*${VALUE}$SP*" ${CONFFILE} >/dev/null
	if [ "$?" -ne "0" ]; then

		#param wrong or missing
		grep -i "^$SP*$PREG$SP*=" ${CONFFILE} > /dev/null
		if [ "$?" -ne "0" ]; then

			#param missing
			return 1

		else

			# param wrong, fix it
			echo "Correcting parameter '$1' to '$2'"

			sed -e "/^$SP*${PREG}$SP*=/s/=.*/= ${VALUE}/" \
                            < ${CONFFILE} > ${CONFFILE}.new || exit 1
			mv ${CONFFILE}.new ${CONFFILE} || exit 1
		fi
	fi

	return 0
}

##########################
#          MAIN          #
##########################

# Determine VAS Version
VERSION=`${VASTOOL} -v |grep Version |cut -d " " -f 4`
VMAJOR=`echo $VERSION | cut -d "." -f 1`
VMINOR=`echo $VERSION | cut -d "." -f 2`
VRELEASE=`echo $VERSION | cut -d "." -f 3`
VBUILD=`echo $VERSION | cut -d "." -f 4`

if [ "$VMAJOR" != "3" ]; then
    echo "ERROR: $0 works only with VAS version 3"
    exit 1
fi

if [ "$1" = "-f" ]; then #force change password without prompting
    OPTFORCE="force"
fi

# First of all check if we are joined
${VASTOOL} -u host/ auth -S host/ > /dev/null 2>&1
if [ "$?" != "0" ]; then
    echo "ERROR: The machine does not appear to be joined to any domain."
	echo "Please verify the machine is correctly joined and then re-run"
	echo "$0 to complete the installation"
	echo "and configuration of both SAMBA and VAS."
	exit 1
fi

#Gather configuration data
# Find the REALM
DOMAIN=`${VASTOOL} -u host/ info domain`
if [ "$DOMAIN" = "" ]; then
        echo "ERROR: Unable to determine the current domain (realm)."
	echo "Is this machine properly joined to the domain?"
	exit 1
fi
REALM=`echo ${DOMAIN} | tr '[a-z]' '[A-Z]'`

# Find the pre-Windows 2000 Domain Name (Workgroup)
DOMAINDN=`${VASTOOL} -u host/ info domain-dn`
if [ "$DOMAINDN" = "" ]; then
	echo "ERROR: Unable to determine current domain information."
	echo "Is this machine properly joined to the domain?"
	exit 1
fi

CONFPART=`${VASTOOL} -u host/ search -s base -b "" -q "(objectclass=*)" namingContexts | grep -i "^CN=Configuration"`
if [ "$CONFPART" = "" ]; then
        echo "ERROR: Unable to find domain configuration information."
	echo "Is this machine properly joined to the domain?"
	exit 1
fi

WORKGROUP=`${VASTOOL} -u host/ search -U"DC://@${DOMAIN}" -b ${CONFPART} -q \(ncName=${DOMAINDN}\) nETBIOSName`
if [ "$WORKGROUP" = "" ]; then
        echo "ERROR: Unable to determine the domain's pre-Windows 2000 name."
	echo "Is this machine properly joined to the domain?"
	exit 1
fi

if [ ! -f ${SAMBACONF} ]; then
	echo "ERROR: ${SAMBACONF} is missing."
	echo "Please verify that the quest-samba package is installed."
	exit 1
fi

TODAY=`date +"%Y%m%d"`

### Make sure samba services are stopped while checking and updating configuration
/etc/init.d/winbindd-quest stop
/etc/init.d/smbd-quest stop
/etc/init.d/vasidmapd stop
/etc/init.d/nmbd-quest stop


if [ "$OPTFORCE" = "force" ]; then
    PAMOPT="yes"
else
    echo ""
    echo "   Samba can be configured to check for pam"
    echo "   restrictions by calling the account and session"
    echo "   stacks, this will make it possible to enforce"
    echo "   vas restrictions on user authentication"
    echo ""
    echo "Do you want samba to obey pam restrictions? [yes]/no"

    # Should we use a timeout here?
    read

    if [ "$REPLY" = "" ]; then
        PAMOPT="yes"
    elif [ "$REPLY" = "y" ]; then
        PAMOPT="yes"
    elif [ "$REPLY" = "yes" ]; then
        PAMOPT="yes"
    else
        PAMOPT="no"
    fi
fi

##########################
# Verify/Modify smb.conf #
##########################

CONFMOD=${SAMBACONF}.mod
NEWTEXT=/tmp/newtext$$.tmp

#Must do this before calling any check_* function
cp ${SAMBACONF} ${CONFMOD}
: >$NEWTEXT

check_and_fix "workgroup" "${WORKGROUP}" "${CONFMOD}" ||
       echo "  workgroup = ${WORKGROUP}" >> $NEWTEXT

check_and_fix "realm" "${REALM}" "${CONFMOD}" ||
       echo "  realm = ${REALM}" >> $NEWTEXT

check_and_fix "security" "ads" "${CONFMOD}" ||
       echo "  security = ads" >> $NEWTEXT

if check_parm "use spnego" "${CONFMOD}"; then
    check_and_fix "use spnego" "yes" "${CONFMOD}" ||
           echo "  use spnego = yes" >> $NEWTEXT
fi

check_and_fix "domain master" "no" "${CONFMOD}" ||
       echo "  domain master = no" >> $NEWTEXT

check_and_fix "domain logons" "no" "${CONFMOD}" ||
       echo "  domain logons = no" >> $NEWTEXT

check_and_fix "use kerberos keytab" "yes" "${CONFMOD}" ||
       echo "  use kerberos keytab = yes" >> $NEWTEXT

check_and_fix "machine password timeout" "0" "${CONFMOD}" ||
       echo "  machine password timeout = 0" >> $NEWTEXT

## Do not enforce this, it is ok only in UPM mode, and potentially bad in non UPM.
#check_and_fix "username map script" "/opt/quest/bin/vasidmap" "${CONFMOD}" ||
#       echo "  username map script = /opt/quest/bin/vasidmap" >>$NEWTEXT

check_and_fix "winbind nested groups" "no" "${CONFMOD}" ||
       echo "  winbind nested groups = no" >> $NEWTEXT

check_and_fix "ldap admin dn" "CN=VasIdmapAdmin" "${CONFMOD}" ||
       echo "  ldap admin dn = CN=VasIdmapAdmin" >> $NEWTEXT

check_and_fix "idmap backend" "ldap:ldap://localhost" "${CONFMOD}" ||
       echo "  idmap backend = ldap:ldap://localhost" >> $NEWTEXT

check_parm "idmap uid" "${CONFMOD}" ||
    echo "  idmap uid = 1-2147483647" >> $NEWTEXT  # FIXME is this portable?

check_parm "idmap gid" "${CONFMOD}" ||
    echo "  idmap gid = 1-2147483647" >> $NEWTEXT  # FIXME is this portable?

check_parm "idmap expire time" "${CONFMOD}" ||
    echo "  idmap expire time = 300   # Expire the tdb cache every 5 minutes" \
        >> $NEWTEXT

if [ "$PAMOPT" = "yes" ]; then
    check_and_fix "obey pam restrictions" "yes" "${CONFMOD}" ||
           echo "  obey pam restrictions = yes" >> $NEWTEXT
fi


#-- insert the new text at the end of the [global] section
if test -s $NEWTEXT; then
    SAVEIFS="$IFS"
    IFS=""
    INGLOBAL=false
    while read ILINE; do
        if echo "$ILINE" | grep -i "^$SP*\[global\]" >/dev/null; then
            INGLOBAL=true
        elif $INGLOBAL && echo "$ILINE" | grep -i "^$SP*\[.*\]" >/dev/null; then
            echo
            echo "  ;--- begin options added by vas-samba-config ($TODAY) ---"
            cat $NEWTEXT
            echo "  ;--- end options added by vas-samba-config ($TODAY) ---"
            echo
            echo "$ILINE"
            cat
            break
        fi
        echo "$ILINE"
    done < ${CONFMOD} > ${CONFMOD}.new
    IFS="$SAVEIFS"
    mv ${SAMBACONF} ${SAMBACONF}.${TODAY}.$$
    mv ${CONFMOD}.new ${SAMBACONF}
    rm -f ${CONFMOD}
    echo "$SAMBACONF: updated"
elif cmp $CONFMOD $SAMBACONF >/dev/null; then
    echo "$SAMBACONF: No changes required"
else
    echo "$SAMBACONF: updated"
    mv ${SAMBACONF} ${SAMBACONF}.${TODAY}.$$
    mv $CONFMOD $SAMBACONF
fi
rm -f $NEWTEXT

#set a fake ldap password
#(this will change with the new IDMAP subsystem in newer versions of Samba)
/opt/quest/bin/smbpasswd -w secret > /dev/null 2>&1

##########################
# Verify/Modify vas.conf #
##########################

CONFMOD=${VASCONF}.mod

#Must do this before calling any check_* function
cp ${VASCONF} ${CONFMOD}
NEWTEXT=/tmp/newtext$$.tmp

if [ $VMINOR -eq 0 ]; then #VAS 3.0.x, make passowrd permanent

    check_and_fix "password-change-interval" "0" "${CONFMOD}" ||
        echo " password-change-interval = 0" >> $NEWTEXT
else # VAS 3.1 or greater, use password change script

    check_and_fix "password-change-script" "${PWDCHGSCRIPT}" "${CONFMOD}" ||
        echo " password-change-script = ${PWDCHGSCRIPT}" >> $NEWTEXT
fi

#-- insert the new text at the end of the [vasd] section
if test -s $NEWTEXT; then
    echo "" >> ${CONFMOD}
    echo "[vasd]" >> ${CONFMOD}
    cat $NEWTEXT >> ${CONFMOD}
    mv ${VASCONF} ${VASCONF}.${TODAY}.$$
    mv ${CONFMOD} ${VASCONF}
    rm -f ${CONFMOD}
    echo "$VASCONF: updated"
elif cmp $CONFMOD $VASCONF >/dev/null; then
    echo "$VASCONF: No changes required"
else
    echo "$VASCONF: updated"
    mv ${VASCONF} ${VASCONF}.${TODAY}.$$
    mv $CONFMOD $VASCONF
fi
rm -f $NEWTEXT


if [ "$DEBUG" -ne "0" ]; then
	echo "Exit before changing the password during debug"
	exit 0
fi

if [ "$OPTFORCE" = "force" ]; then
    PWDCHANGE="yes"
else
    echo ""
    echo "   The first time you configure samba you should"
    echo "   do a host password change to enable samba to"
    echo "   directly connect to AD and also provide NTLM"
    echo "   fallback authentication."
    echo ""
    echo "Do you want to change the host password? [yes]/no"

    # Should we use a timeout here?
    read

    if [ "$REPLY" = "" ]; then
        PWDCHANGE="yes"
    elif [ "$REPLY" = "y" ]; then
        PWDCHANGE="yes"
    elif [ "$REPLY" = "yes" ]; then
        PWDCHANGE="yes"
    else
        PWDCHANGE="no"
    fi
fi

#Set domain SID
echo "Detecting domain SID..."
DOMUSER=`${VASTOOL} list users | awk -F: '{print $1;exit}'`
DOMSID=`/opt/quest/bin/vasidmap -u -n "$DOMUSER" | cut -d '-' -f 1-7`
/opt/quest/bin/net setdomainsid "$DOMSID"

if [ "$PWDCHANGE" = "yes" ]; then

    #Generate a secret key from the hex form of current key material
    SECRET='X!'`$VASTOOL ktutil list --keys | 
        awk 'NR==4{print substr($4,0,16);exit}'`
    # Change the machine password using vastool
    (echo "$SECRET"; echo "$SECRET") | ${VASTOOL} -s -u host/ passwd

    # Set the new machine password into secrets.tdb
    echo "$SECRET" | ${PWDCHGSCRIPT}
fi

### Finally restart samba services
/etc/init.d/vasidmapd start
/etc/init.d/nmbd-quest start
/etc/init.d/smbd-quest start
/etc/init.d/winbindd-quest start
